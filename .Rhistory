library(flextable)       # flextable()
library(officer)         # font - flextable
library(lme4)            # multilevel modeling
library(lmerTest)        # multilevel modeling
library(ggeffects)       # post-estimations - > for visualization
library(marginaleffects) # post-estimations - > for visualization
# May introduce here() for workstation
df <- read_dta("/Users/AntonieHsu/Library/CloudStorage/Box-Box/Teaching Materials/R workshop/2025/2025workshop_rdata.dta")
# Short review of tidyverse (maybe introduce tidylog)
df<- df%>%
mutate(genrelns = to_factor(genrelns),
fem = ifelse(fem==1, "Female", "Male"),
pfem= ifelse(pfem==1, "Female", "Male"),
postgrad = to_factor(postgrad),
fem = to_factor(fem),
pfem = to_factor(pfem),
race = to_factor(race),
hhincome_max = to_factor(hhincome_max),
kidage = to_factor(kidage))
df<- df%>%
set_variable_labels(genrelns = "Gender-Relational Contexts",
depsym = "Depressive Symptoms",
scoping = "Spousal Support",
yrsliv = "Years Lived Together",
rage = "Respndent's Age",
postgrad = "College and Above",
fem = "Respodent's Gender",
pfem = "Partner's Gender",
race = "Race",
hhincome_max = "Household Income",
kidage = "Having Kids under 18")
df$genrelns <- droplevels(df$genrelns)
## This is a more complicated table, because I want to show the descriptives for the whole sample and by contexts.
## Thus, we make two table objects and then tbl_merge them.
des_table1 <- df%>%
tbl_summary(missing = "no", # removing missing column
statistic = list(all_categorical() ~ "{n} ({p}%)",     # define the statistics for cat. and cont.
all_continuous() ~ "{mean} ({sd})"),
digits = all_continuous() ~ 2,
include = c(depsym, scoping, fem, pfem, yrsliv, rage, race, postgrad, hhincome_max, kidage))%>%
modify_header(label = "**Variables**")%>%
modify_footnote(all_stat_cols() ~ "N (Percentage in Parentheses)")%>%
bold_labels()
## show_header_names(des_table1)
des_table <- df%>%
tbl_summary(by = genrelns, missing = "no",
type = list(where(is.numeric) ~ "continuous"),
statistic = list(all_categorical() ~ "{n} ({p}%)",
all_continuous() ~ "{mean} ({sd})"),
digits = all_continuous() ~ 2,
include = c(depsym, scoping, fem, pfem, yrsliv, rage, race, postgrad, hhincome_max, kidage))%>%
modify_header(label = "**Variables**")%>%
modify_footnote(all_stat_cols() ~ "N (Percentage in Parentheses)")%>%
bold_labels()
full_table <- tbl_merge(tbls = list(des_table1, des_table),
tab_spanner = c("**Full Sample**", "**By GRCs**"))%>%
as_flex_table()
full_table <-  full_table %>%
flextable::add_footer_lines("Data from HARP T1")%>%
flextable::set_caption(caption = "Table 1: Descriptive Statistics by Gender-Relational Contexts")%>%
flextable::line_spacing(space = 0.4, part = "body")%>%
flextable::style(pr_t = fp_text(font.family = "serif"), part = "all")
full_table
## All the formatting required is here:
# "plain", "italic", "bold", "bold.italic"
format <-  theme_minimal() +
theme(axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size=16, face = "bold"),
legend.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 16),
strip.text = element_text(size=14, face = "bold"),
text = element_text('Comic Sans MS')) # 'serif', 'sans'
## Thanks to Shelley I can add these codes in this workshop.
fig1 <- ggplot(df, aes(x = scoping, y = depsym)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Spousal Support",
y = "Depressive Symptoms") + format
fig2<- ggplot(df, aes(x = genrelns, y = depsym)) +
geom_bar(stat = "summary", fun = mean, aes(fill = genrelns)) +
geom_errorbar(stat = "summary",
fun.data = mean_cl_normal,
width = 0.2) +
scale_fill_grey(start = .2, end = .7)+
# scale_y_continuous(limits=c(10, 20), labels = scales::number_format(accuracy = 1)) +
labs(x = "Gender-Relational",
y = "Depressive Symptoms",
fill = NULL)+
format + theme(legend.position="none")
fig1
fig2
## Mixed-effects multilevel modeling
mod1 <- lmer(depsym ~ scoping + genrelns + rage + yrsliv + race + postgrad + (1 | cid), data = df, REML = FALSE)
mod2 <- lmer(depsym ~ scoping * genrelns + rage + yrsliv + race + postgrad + (1 | cid), data = df, REML = FALSE)
ds_mods <- list("DD 1"  = mod1,
"DD 2"  = mod2)
regtab1 <- modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error",
stars = TRUE,
output = "flextable")
cm_ds <- c('scoping'    = 'Spousal Support',
'genrelnsMan w/Wom' = 'Man w/Wom (Ref = M/M)',
'genrelnsWom w/Man' = "Wom w/Man",
'genrelnsWom w/Wom' = "Wom w/Wom",
'scoping:genrelnsMan w/Wom' = 'Spousal Support x MW',
'scoping:genrelnsWom w/Man' = 'Spousal Support x WM',
'scoping:genrelnsWom w/Wom' = 'Spousal Support x WW',
'rage' = 'Age',
'yrsliv' = 'Rel. Duration (Year)',
'racenon-white' = 'non-White (Ref = White)',
'postgradpostgrad' = '>College (Ref = College or Less)' )
regtab1 <- modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error", # can change to ci, can exponentiate
stars = TRUE,
coef_omit = "Intercept|SD.*",
coef_map = cm_ds,
output = "flextable")
get_gof(mod1) # goodness of fit statistics
f <- function(x) format(round(x, 0), big.mark=",") # thousand separator
gm <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = f),
list("raw" = "aic", "clean" = "AIC", "fmt" = f),
list("raw" = "bic", "clean" = "BIC", "fmt" = f),
list("raw" = "r2.conditional", "clean" = "Cond. R-Squared", "fmt" = 2))
regtab2 <- modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error",
stars = TRUE,
coef_omit = "Intercept|SD.*",
coef_map = cm_ds, gof_map = gm,
output = "flextable")
modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error",
stars = TRUE,
coef_omit = "Intercept|SD.*",
coef_map = cm_ds, gof_map = gm,
output = "flextable")%>%
flextable::autofit()%>%
flextable::style(pr_t = fp_text(font.family = "Times New Roman"), part = "all")%>%
flextable::add_footer_lines("Data from HARP 2015")%>%
flextable::set_caption(caption = "Mixed-Effects Models on Dep. Symptoms")
pred_ds <-  ggpredict(mod2, terms = c("scoping", "genrelns"))
data.frame(pred_ds)
pd <- position_dodge(width = 0.4)
ggplot(pred_ds, aes(x = x, y = predicted,
color = group)) +
geom_line(position = pd) +
geom_point(aes(shape = group), size = 3, position = pd) +
geom_errorbar(aes(ymin = conf.low,
ymax = conf.high),
position = pd,
width = 0.3 ,linewidth = 0.3)+
scale_color_grey(start = 0, end = .7)+
labs(
x = "Spousal Support",
y = "Pred. Dep. Sym.",
color = "Gender-Relational", shape = "Gender-Relational"
) + format
levels(df$scoping)
df$scoping
range(df$scoping)
# Always load required packages first
library(tidyverse)       # data cleaning/management
library(haven)           # loading stata data
library(survey)          # Survey Design
library(labelled)        # used to deal with data labels
library(gtsummary)       # making descriptive tables
library(ggplot2)
library(modelsummary)    # making regression tables
library(flextable)       # flextable()
library(officer)         # font - flextable
library(lme4)            # multilevel modeling
library(lmerTest)        # multilevel modeling
library(ggeffects)       # post-estimations - > for visualization
library(marginaleffects) # post-estimations - > for visualization
# May introduce here() for workstation
df <- read_dta("/Users/AntonieHsu/Library/CloudStorage/Box-Box/Teaching Materials/R workshop/2025/2025workshop_rdata.dta")
# Short review of tidyverse (maybe introduce tidylog)
df<- df%>%
mutate(genrelns = to_factor(genrelns),
fem = ifelse(fem==1, "Female", "Male"),
pfem= ifelse(pfem==1, "Female", "Male"),
postgrad = to_factor(postgrad),
fem = to_factor(fem),
pfem = to_factor(pfem),
race = to_factor(race),
hhincome_max = to_factor(hhincome_max),
kidage = to_factor(kidage))
df<- df%>%
set_variable_labels(genrelns = "Gender-Relational Contexts",
depsym = "Depressive Symptoms",
scoping = "Spousal Support",
yrsliv = "Years Lived Together",
rage = "Respndent's Age",
postgrad = "College and Above",
fem = "Respodent's Gender",
pfem = "Partner's Gender",
race = "Race",
hhincome_max = "Household Income",
kidage = "Having Kids under 18")
df$genrelns <- droplevels(df$genrelns)
str(df)
tbl_summary()
des_table1 <- df%>%
tbl_summary(missing = "no", # removing missing column
statistic = list(all_categorical() ~ "{n} ({p}%)",     # define the statistics for cat. and cont.
all_continuous() ~ "{mean} ({sd})"),
digits = all_continuous() ~ 2,
include = c(depsym, scoping, fem, pfem, yrsliv, rage, race, postgrad, hhincome_max, kidage))
des_table1
show_header_names(des_table1)
des_table1 <- df%>%
tbl_summary(missing = "no", # removing missing column
statistic = list(all_categorical() ~ "{n} ({p}%)",     # define the statistics for cat. and cont.
all_continuous() ~ "{mean} ({sd})"),
digits = all_continuous() ~ 2,
include = c(depsym, scoping, fem, pfem, yrsliv, rage, race, postgrad, hhincome_max, kidage))%>%
modify_header(label = "**Variables**")%>%
modify_footnote(all_stat_cols() ~ "N (Percentage in Parentheses)")%>%
bold_labels()
des_table1
des_table <- df%>%
tbl_summary(by = genrelns, missing = "no",
type = list(where(is.numeric) ~ "continuous"),
statistic = list(all_categorical() ~ "{n} ({p}%)",
all_continuous() ~ "{mean} ({sd})"),
digits = all_continuous() ~ 2,
include = c(depsym, scoping, fem, pfem, yrsliv, rage, race, postgrad, hhincome_max, kidage))%>%
modify_header(label = "**Variables**")%>%
modify_footnote(all_stat_cols() ~ "N (Percentage in Parentheses)")%>%
bold_labels()
des_table
des_table
des_table1
full_table <- tbl_merge(tbls = list(des_table1, des_table),
tab_spanner = c("**Full Sample**", "**By Family Types**"))
full_table
full_table <- tbl_merge(tbls = list(des_table1, des_table),
tab_spanner = c("**Full Sample**", "**By Family Types**"))%>%
as_flex_table()
full_table
full_table <-  full_table %>%
flextable::add_footer_lines("Data from HARP T1")%>%
flextable::set_caption(caption = "Table 1: Descriptive Statistics by Gender-Relational Contexts")%>%
flextable::line_spacing(space = 0.4, part = "body")%>%
flextable::style(pr_t = fp_text(font.family = "serif"), part = "all")
full_table
## All the formatting required is here:
# "plain", "italic", "bold", "bold.italic"
format <-  theme_minimal() +
theme(axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size=16, face = "bold"),
legend.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 16),
strip.text = element_text(size=14, face = "bold"),
text = element_text('Comic Sans MS')) # 'serif', 'sans'
## Thanks to Shelley I can add these codes in this workshop.
fig1 <- ggplot(df, aes(x = scoping, y = depsym)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Spousal Support",
y = "Depressive Symptoms") + format
fig2<- ggplot(df, aes(x = genrelns, y = depsym)) +
geom_bar(stat = "summary", fun = mean, aes(fill = genrelns)) +
geom_errorbar(stat = "summary",
fun.data = mean_cl_normal,
width = 0.2) +
scale_fill_grey(start = .2, end = .7)+
# scale_y_continuous(limits=c(10, 20), labels = scales::number_format(accuracy = 1)) +
labs(x = "Gender-Relational",
y = "Depressive Symptoms",
fill = NULL)+
format + theme(legend.position="none")
fig1
fig2
mod1 <- lmer(depsym ~ scoping + genrelns + rage + yrsliv + race + postgrad + (1 | cid), data = df, REML = FALSE)
mod2 <- lmer(depsym ~ scoping * genrelns + rage + yrsliv + race + postgrad + (1 | cid), data = df, REML = FALSE)
ds_mods <- list("DS 1"  = mod1,
"DS 2"  = mod2)
ds_mods
regtab1 <- modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error",
stars = TRUE,
output = "flextable")
regtab1
cm_ds <- c('scoping'    = 'Spousal Support',
'genrelnsMan w/Wom' = 'Man w/Wom (Ref = M/M)',
'genrelnsWom w/Man' = "Wom w/Man",
'genrelnsWom w/Wom' = "Wom w/Wom",
'scoping:genrelnsMan w/Wom' = 'Spousal Support x MW',
'scoping:genrelnsWom w/Man' = 'Spousal Support x WM',
'scoping:genrelnsWom w/Wom' = 'Spousal Support x WW',
'rage' = 'Age',
'yrsliv' = 'Rel. Duration (Year)',
'racenon-white' = 'non-White (Ref = White)',
'postgradpostgrad' = '>College (Ref = College or Less)')
regtab1 <- modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error", # can change to ci, can exponentiate
stars = TRUE,
coef_map = cm_ds,
output = "flextable")
regtab1
get_gof(mod1)
get_gof(mod1)
f <- function(x) format(round(x, 0), big.mark=",") # thousand separator
gm <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = f),
list("raw" = "aic", "clean" = "AIC", "fmt" = f),
list("raw" = "bic", "clean" = "BIC", "fmt" = f),
list("raw" = "r2.conditional", "clean" = "Cond. R-Squared", "fmt" = 2))
regtab2 <- modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error",
stars = TRUE,
coef_map = cm_ds,
gof_map = gm,
output = "flextable")
regtab2
modelsummary(ds_mods,
shape =  term + statistic ~ model ,
fmt =2, ## for decimal points
statistic = "std.error",
stars = TRUE,
coef_omit = "Intercept|SD.*",
coef_map = cm_ds, gof_map = gm,
output = "flextable")%>%
flextable::autofit()%>%
flextable::style(pr_t = fp_text(font.family = "Times New Roman"), part = "all")%>%
flextable::add_footer_lines("Data from HARP 2015")%>%
flextable::set_caption(caption = "Mixed-Effects Models on Dep. Symptoms")
summary(mod2)
pred_ds <-  ggpredict(mod2, terms = c("scoping", "genrelns"))
pred_ds
data.frame(pred_ds)
## All the formatting required is here:
# "plain", "italic", "bold", "bold.italic"
format <-  theme_minimal() +
theme(axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size=16, face = "bold"),
legend.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 16),
strip.text = element_text(size=14, face = "bold"),
text = element_text('Comic Sans MS')) # 'serif', 'sans'
## Thanks to Shelley I can add these codes in this workshop.
fig1 <- ggplot(df, aes(x = scoping, y = depsym)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Spousal Support",
y = "Depressive Symptoms") + format
fig2<- ggplot(df, aes(x = genrelns, y = depsym)) +
geom_bar(stat = "summary", fun = mean, aes(fill = genrelns)) +
geom_errorbar(stat = "summary",
fun.data = mean_cl_normal,
width = 0.2) +
scale_fill_grey(start = .2, end = .7)+
# scale_y_continuous(limits=c(10, 20), labels = scales::number_format(accuracy = 1)) +
labs(x = "Gender-Relational",
y = "Depressive Symptoms",
fill = NULL)+
format + theme(legend.position="none")
fig1
fig2
ggplot(pred_ds, aes(x = x, y = predicted,
color = group)) +
geom_line(position = pd) +
geom_point(aes(shape = group), size = 3, position = pd) +
geom_errorbar(aes(ymin = conf.low,
ymax = conf.high),
position = pd,
width = 0.3 ,linewidth = 0.3)+
scale_color_grey(start = 0, end = .7)+
labs(
x = "Spousal Support",
y = "Pred. Dep. Sym.",
color = "Gender-Relational", shape = "Gender-Relational"
) + format
pd <- position_dodge(width = 0.4)
ggplot(pred_ds, aes(x = x, y = predicted,
color = group)) +
geom_line(position = pd) +
geom_point(aes(shape = group), size = 3, position = pd) +
geom_errorbar(aes(ymin = conf.low,
ymax = conf.high),
position = pd,
width = 0.3 ,linewidth = 0.3)+
scale_color_grey(start = 0, end = .7)+
labs(
x = "Spousal Support",
y = "Pred. Dep. Sym.",
color = "Gender-Relational", shape = "Gender-Relational"
) + format
# -- block for required packages
library(tibble)
library(gtsummary)
library(tidyverse)
library(arsenal)
library(haven)
library(survey)
library(labelled)
library(table1)
library(officer)
library(here)
library(modelsummary)
library(flextable)
library(tinytable)
library(ggeffects)
library(effects)
require(MASS)
library(marginaleffects)
library(here)
library(ftExtra)
library(ghibli)
library(lme4)
# -- end of block
# May introduce here() for workstation
df <- read_dta("/Users/AntonieHsu/Library/CloudStorage/Box-Box/Teaching Materials/R workshop/2025/2025workshop_rdata.dta")
# Short review of tidyverse (maybe introduce tidylog)
df<- df%>%
mutate(genrelns = to_factor(genrelns),
fem = ifelse(fem==1, "Female", "Male"),
pfem= ifelse(pfem==1, "Female", "Male"),
postgrad = to_factor(postgrad),
fem = to_factor(fem),
pfem = to_factor(pfem),
race = to_factor(race),
hhincome_max = to_factor(hhincome_max),
kidage = to_factor(kidage))
df<- df%>%
set_variable_labels(genrelns = "Gender-Relational Contexts",
depsym = "Depressive Symptoms",
scoping = "Spousal Support",
yrsliv = "Years Lived Together",
rage = "Respndent's Age",
postgrad = "College and Above",
fem = "Respodent's Gender",
pfem = "Partner's Gender",
race = "Race",
hhincome_max = "Household Income",
kidage = "Having Kids under 18")
df$genrelns <- droplevels(df$genrelns)
### Modelings
mod2 <- lmer(depsym ~ scoping * genrelns + rage + yrsliv + race + postgrad + (1 | cid), data = df, REML = FALSE)
pred_ds <-  ggpredict(mod2, terms = c("scoping", "genrelns"))
data.frame(pred_ds)
format <-  theme_minimal() +
theme(axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size=16, face = "bold"),
legend.title = element_text(size = 18, face = "bold"),
legend.text = element_text(size = 16),
strip.text = element_text(size=14, face = "bold"),
text = element_text('Comic Sans MS')) # 'serif', 'sans'
pd <- position_dodge(width = 0.4)
plot1<-  pred_ds%>%
filter(group == c("Wom w/Man", "Man w/Wom"))%>%
ggplot( aes(x = x, y = predicted,
color = group)) +
geom_line(position = pd) +
geom_point(aes(shape = group), size = 3, position = pd) +
geom_errorbar(aes(ymin = conf.low,
ymax = conf.high),
position = pd,
width = 0.3 ,linewidth = 0.3)+
scale_color_grey(start = 0, end = .7)+
labs(
x = "Spousal Support",
y = "Pred. Dep. Sym.",
color = "Gender-Relational", shape = "Gender-Relational"
) + format
plot2<-  pred_ds%>%
ggplot( aes(x = x, y = predicted,
color = group)) +
geom_line(position = pd) +
geom_point(aes(shape = group), size = 3, position = pd) +
geom_errorbar(aes(ymin = conf.low,
ymax = conf.high),
position = pd,
width = 0.3 ,linewidth = 0.3)+
scale_color_grey(start = 0, end = .7)+
labs(
x = "Spousal Support",
y = "Pred. Dep. Sym.",
color = "Gender-Relational", shape = "Gender-Relational"
) + format
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ...looping the figures in a slideshow
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pptplot_list<- list(plot1, plot2)
output_folder <- c("/Users/AntonieHsu/Library/CloudStorage/Box-Box/Teaching Materials/R workshop/UT_R_2025/")
timestamp <- Sys.Date()
pptfile <- tempfile(fileext = ".pptx", tmpdir = output_folder)
pptx <- read_pptx()
for(i in 1:length(pptplot_list)){
pptx <- add_slide(pptx)
pptx <- ph_with(pptx,
value = pptplot_list[[i]],
location = ph_location_fullsize() )
}
print(pptx, pptfile)
destination_file <- file.path(paste0(output_folder, timestamp, "R_workshop.pptx"))
file.rename(pptfile, destination_file)
